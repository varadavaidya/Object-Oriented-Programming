def SumDigits(n):
    if n<10:
        return n
    else:
        return int((n%10) + SumDigits(n/10))


print(SumDigits(9148968076))
print(SumDigits(9))

def power(x,n):
    if n==0:
        return 1
    else:
        return x*power(x,n-1)

print(power(-2,5))

def GCD(x,y):
    assert  int(x)==x and  int(y)==y,"enter only integers"
    if x<0:
        x=-1*x
    if y<0:
        y=-1*y
    if y==0:
        return x
    else:
        return GCD(y,x%y)


print(GCD(12,8))
print(GCD(12,-8))


def Deci_to_Bin(n):
    if n==1:
        return 1
    else:
        return n%2 + 10*Deci_to_Bin(int(n/2))

print(Deci_to_Bin(122))

def Bin_to_Deci(m):
    if m==0:
        return 0
    return m%10+2*Bin_to_Deci(int(m/10))

print(Bin_to_Deci(1111010))
print(Bin_to_Deci(100000))


def reverse(strng):
    m = len(strng)
    if m==0:
        return ''
    elif m==1:
        return strng[0]
    else:
        return strng[-1]+reverse(strng[:int(m-1)])



strng='varada'
m=(len(strng)-1)
print(strng[2])
print(strng[:6])
print(reverse(strng))


def isOdd(num):
    if num % 2 == 0:
        return False
    else:
        return True


def someRecursive(arr, cb):
    m = len(arr)
    if m == 1:
        return cb(arr[0])
    elif cb(arr[0]) + someRecursive(arr[1:m],cb) !=0:
        return True
    else:
        return False

print(someRecursive([1,2,3,4], isOdd))
print(someRecursive([4,6,8,9], isOdd))
print(someRecursive([4,6,8], isOdd))

def flatten(arr):
    m=len(arr)
    if m==1 and type(arr[0])==int:
        return [arr[0]]
    elif m==1 and type(arr[0])!=int:
        return flatten(arr[0])
    else:
        if type(arr[0])==int:
            return [arr[0]]+ flatten(arr[1:m])
        else:
            return flatten(arr[0])+flatten(arr[1:m])

print(flatten([1, 2, 3, [4, 5]])) # [1, 2, 3, 4, 5]
print(flatten([1, [2, [3, 4], [[5]]]]) )# [1, 2, 3, 4, 5]
print(flatten([[1], [2], [3]]) )# [1, 2, 3]
print(flatten([[[[1], [[[2]]], [[[[[[[3]]]]]]]]]]) )# [1, 2, 3]


def capitalizeFirst(arr):
    m=len(arr)
    if m==1:
        return [arr[0].capitalize()]
    else:
        return [arr[0].capitalize()]+ capitalizeFirst(arr[1:m])


print(capitalizeFirst(['car', 'taco', 'banana']))
'''
arr=['car', 'taco', 'banana']
print(arr[0].capitalize())
print(arr[1:3])
arr=['taco', 'banana']

print(type(['car'].extend(['taco'].extend(['banana']))))'''


arr=['taco', 'banana']
print(arr[1:2])
arr=['banana']
print([arr[0].capitalize()])

def capitalizeAll(arr):
    m=len(arr)
    if m==1:
        return [arr[0].upper()]
    else:
        return [arr[0].upper()]+ capitalizeFirst(arr[1:m])
